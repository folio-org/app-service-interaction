name: Release preparation

run-name: Application Release Branch Preparation${{ inputs.dispatch_id != '' && format(' [{0}]', inputs.dispatch_id) || '' }}

on:
  workflow_dispatch:
    inputs:
      previous_release_branch:
        description: 'Previous release branch (e.g., R1-2024)'
        required: true
        type: string
      new_release_branch:
        description: 'New release branch (e.g., R2-2024)'
        required: true
        type: string
      use_snapshot_fallback:
        description: 'Use snapshot branch as fallback if previous release branch not found'
        required: false
        type: boolean
        default: false
      use_snapshot_version:
        description: 'Use snapshot version as a base version'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false
      dispatch_id:
        description: 'Unique identifier for workflow tracking'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  prepare-app-release:
    name: Prepare Application Release
    uses: folio-org/kitfox-github/.github/workflows/release-preparation.yml@master
    with:
      app_name: ${{ github.event.repository.name }}
      repo: ${{ github.repository }}
      previous_release_branch: ${{ inputs.previous_release_branch }}
      new_release_branch: ${{ inputs.new_release_branch }}
      use_snapshot_fallback: ${{ inputs.use_snapshot_fallback }}
      use_snapshot_version: ${{ inputs.use_snapshot_version }}
      dry_run: ${{ inputs.dry_run }}      
    secrets: inherit

  slack_notification:
    name: Slack Notification
    needs: prepare-app-release
    if: always() && !cancelled() && inputs.dry_run == false && vars.SLACK_NOTIF_CHANNEL != ''
    uses: folio-org/kitfox-github/.github/workflows/release-preparation-notification.yml@master
    with:
      app_name: ${{ github.repository }}
      new_release_branch: ${{ inputs.new_release_branch }}
      source_branch: ${{ needs.prepare-app-release.outputs.source_branch }}
      app_version: ${{ needs.prepare-app-release.outputs.app_version }}
      commit_sha: ${{ needs.prepare-app-release.outputs.commit_sha }}
      workflow_result: ${{ needs.prepare-app-release.result }}
      workflow_run_id: ${{ github.run_id }}
      workflow_run_number: ${{ github.run_number }}
      slack_notif_channel: ${{ vars.SLACK_NOTIF_CHANNEL }}
    secrets: inherit

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [prepare-app-release, slack_notification]
    if: always()
    steps:
      - name: Generate Workflow Summary
        env:
          PREP_RESULT: ${{ needs.prepare-app-release.result }}
          PREVIOUS_RELEASE: ${{ inputs.previous_release_branch }}
          NEW_RELEASE: ${{ inputs.new_release_branch }}
          SOURCE_BRANCH: ${{ needs.prepare-app-release.outputs.source_branch }}
          APP_VERSION: ${{ needs.prepare-app-release.outputs.app_version }}
          COMMIT_SHA: ${{ needs.prepare-app-release.outputs.commit_sha }}
          DRY_RUN: ${{ inputs.dry_run }}
          USE_SNAPSHOT_FALLBACK: ${{ inputs.use_snapshot_fallback }}
          USE_SNAPSHOT_VERSION: ${{ inputs.use_snapshot_version }}
          SLACK_NOTIF_OUTCOME: ${{ needs.slack_notification.outputs.notification_outcome }}
          SLACK_NOTIF_STATUS_ICON: >-
            ${{
              needs.slack_notification.outputs.notification_outcome == 'success' && '✅'
              || needs.slack_notification.outputs.notification_outcome == 'failure' && '⚠️'
              || 'ℹ️'
            }}
        run: |
          {
            echo "## 🎯 ${{ github.event.repository.name }} Release Preparation Summary"
            echo ""

            echo "### 📋 Release Information"
            echo "- **Previous Release:** $PREVIOUS_RELEASE"
            echo "- **New Release:** $NEW_RELEASE"
            echo "- **Source Branch:** ${SOURCE_BRANCH:-N/A}"
            echo "- **Triggered by:** ${{ github.actor }}"
            echo "- **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo ""

            if [[ "$PREP_RESULT" == "success" ]]; then
              echo "### ✅ Release Preparation Successful"
              echo ""
              echo "#### 📊 Details:"
              echo "- **New Version:** ${APP_VERSION:-N/A}"
              echo "- **Commit SHA:** \`${COMMIT_SHA:-N/A}\`"
              echo "- **Branch Created:** [$NEW_RELEASE](${{ github.server_url }}/${{ github.repository }}/tree/$NEW_RELEASE)"

            elif [[ "$PREP_RESULT" == "skipped" ]]; then
              echo "### ⏭️ Release Preparation Skipped"
              echo "The workflow was skipped, likely due to a dry run or conditional logic."

            elif [[ "$PREP_RESULT" == "cancelled" ]]; then
              echo "### ⚠️ Release Preparation Cancelled"
              echo "The workflow was cancelled before completion."

            else
              echo "### ❌ Release Preparation Failed"
              echo ""
              echo "#### 🔍 Troubleshooting Steps:"
              echo "1. Verify the previous release branch exists"
              echo "2. Check that the new release branch name is unique"
              echo "3. Ensure you have necessary permissions"
              echo "4. Review the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error information"
            fi

            if [[ "$DRY_RUN" == "true" ]]; then
              echo ""
              echo "### 🏃 Dry Run Mode"
              echo "This was a dry run - no actual changes were made."
              echo "Set \`dry_run=false\` to apply changes."
            fi

            echo ""
            echo "### 📨 Notification Status"
            echo ""

            if [[ "$DRY_RUN" == "true" ]]; then
              echo "ℹ️ **Slack Notification:** Skipped (dry run mode)"
            elif [[ -n "${{ vars.SLACK_NOTIF_CHANNEL }}" ]]; then
              if [[ "$SLACK_NOTIF_OUTCOME" == "success" ]]; then
                echo "$SLACK_NOTIF_STATUS_ICON **Slack Channel** (\`${{ vars.SLACK_NOTIF_CHANNEL }}\`): Notification sent successfully"
              elif [[ "$SLACK_NOTIF_OUTCOME" == "failure" ]]; then
                echo "$SLACK_NOTIF_STATUS_ICON **Slack Channel** (\`${{ vars.SLACK_NOTIF_CHANNEL }}\`): Failed to send notification"
              elif [[ "$SLACK_NOTIF_OUTCOME" == "skipped" ]]; then
                echo "$SLACK_NOTIF_STATUS_ICON **Slack Channel** (\`${{ vars.SLACK_NOTIF_CHANNEL }}\`): Notification skipped"
              else
                echo "ℹ️ **Slack Channel** (\`${{ vars.SLACK_NOTIF_CHANNEL }}\`): No notification sent"
              fi
            else
              echo "ℹ️ **Slack Notification:** Channel not configured"
            fi

            echo ""
            echo "### 🔄 Workflow Options Used"
            echo "- **Use Snapshot Fallback:** $USE_SNAPSHOT_FALLBACK"
            echo "- **Use Snapshot Version:** $USE_SNAPSHOT_VERSION"
            echo "- **Dry Run:** $DRY_RUN"
            if [[ -n "${{ inputs.dispatch_id }}" ]]; then
              echo "- **Dispatch ID:** ${{ inputs.dispatch_id }}"
            fi

            echo ""
            echo "---"
            echo "*Generated by ${{ github.workflow }} at $(date -u +'%Y-%m-%d %H:%M:%S UTC')*"
          } >> $GITHUB_STEP_SUMMARY
